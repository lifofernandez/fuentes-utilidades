#!/usr/bin/env python2
""" Glyph Plot

Some UFO monitoring
por: lisandro fernandez

"""


import numpy as np
import argparse, robofab, math, sys
from robofab.world import RFont, RGlyph

import matplotlib
import matplotlib.pyplot as pyplot

from matplotlib.path import Path
import matplotlib.patches as patches
from matplotlib.collections import PatchCollection
# http://matplotlib.org/api/patches_api.html#matplotlib.patches.PathPatch

######
# robofab point type to matplotlib path code maping
# http://matplotlib.org/api/path_api.html

pType2cCode = {
	'stop': 0,
	'move': 1,
	'line': 2,
	#'offcurve': 3,
	'offcurve': 4,
	'curve': 4,
	'close': 79,
}


######
# Args handling 

parser = argparse.ArgumentParser()
parser.add_argument(
	"ufo_in",
	help = "the ufo file to process"
)
parser.add_argument(
	"glyph",
	help = "the glyph to plot"
)
parser.add_argument(
	"-v", "--verbose",
	help = "increase output verbosity",
	action = "store_true"
)
args = parser.parse_args()

path = args.ufo_in
g = args.glyph


######
# Font load and path plot

font = RFont(path)


if font == None:
	print "You should open a font first, there's nothing to look at now!"
else:
	print "The current font is:",font.info.postscriptFullName
	if args.verbose:
		print "the number of glyphs:", len(font)
		print "full name of this font:", font.info.postscriptFullName
		print 'ascender:', font.info.ascender
		print 'descender:', font.info.descender
		print '-----'
		print "list of glyph names:", font.keys()
		print '-----'


glyph = font[g]
print 'Glypho:', g
print 'Contornos:', len( glyph.contours )
print 'Extra Components:', len( glyph.components)

for component in glyph.components:
    print component._baseGlyph
    print vars(component)
print '-----'

fig, ax = pyplot.subplots()
PATCHES = []
for contour in glyph:

	POINTS = []
	for point in contour.points:
		pathCode = pType2cCode[point.type]
		p = ( pathCode, ( point.x, point.y ) )
		POINTS.append( p );
		if args.verbose:
			print point.type+':', point.x, point.y

	codes, verts = zip( * POINTS )
	path = Path(
		verts,
		codes
	)
	patch = patches.PathPatch(
		path,
		facecolor = 'r',
		alpha = 0.5
	)
	PATCHES.append( patch )

colors = 100 * np.random.rand( len( PATCHES ) )

c = PatchCollection(
	PATCHES,
	cmap  = matplotlib.cm.jet,
	alpha = 0.4
)
c.set_array(
	np.array( colors )
)
ax.add_collection( c )
ax.grid()
ax.axis( 'equal' )

# # Control Points and connecting lines
# # TO DO: separar putos, mejorar represenatacion
# x, y = zip( * path.vertices )
# # line = ax.plot( x, y, 'go-' )
# line = ax.plot(x, y, 'x--', lw=2, color='black', ms=10)
# 

pyplot.show()
